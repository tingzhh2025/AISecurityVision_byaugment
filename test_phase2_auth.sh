#!/bin/bash

echo "=== Phase 2 Authentication System Testing ==="
echo "Testing newly implemented authentication API endpoints..."
echo

# Test 1: Admin Login
echo "1. Testing admin login"
ADMIN_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/auth/login" \
    -H "Content-Type: application/json" \
    -d '{"username": "admin", "password": "admin123"}')

if [[ $? -eq 0 && ! -z "$ADMIN_RESPONSE" ]]; then
    echo "‚úÖ SUCCESS: Admin login successful"
    ADMIN_TOKEN=$(echo "$ADMIN_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    echo "Admin token: ${ADMIN_TOKEN:0:50}..."
else
    echo "‚ùå FAILED: Admin login failed"
    exit 1
fi
echo

# Test 2: Get current user info
echo "2. Testing get current user info"
USER_INFO=$(curl -s -X GET "http://localhost:8080/api/auth/user" \
    -H "Authorization: Bearer $ADMIN_TOKEN")

if [[ $? -eq 0 && ! -z "$USER_INFO" ]]; then
    echo "‚úÖ SUCCESS: User info retrieved"
    echo "Response: ${USER_INFO:0:100}..."
else
    echo "‚ùå FAILED: Could not retrieve user info"
fi
echo

# Test 3: Token validation
echo "3. Testing token validation"
VALIDATE_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/auth/validate" \
    -H "Content-Type: application/json" \
    -d "{\"token\": \"$ADMIN_TOKEN\"}")

if [[ $? -eq 0 && ! -z "$VALIDATE_RESPONSE" ]]; then
    echo "‚úÖ SUCCESS: Token validation successful"
    echo "Response: ${VALIDATE_RESPONSE:0:100}..."
else
    echo "‚ùå FAILED: Token validation failed"
fi
echo

# Test 4: User registration (admin only)
echo "4. Testing user registration (admin only)"
REG_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/auth/register" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $ADMIN_TOKEN" \
    -d '{"username": "phase2user", "password": "testpass123", "role": "user"}')

if [[ $? -eq 0 && ! -z "$REG_RESPONSE" ]]; then
    echo "‚úÖ SUCCESS: User registration successful"
    echo "Response: ${REG_RESPONSE:0:100}..."
else
    echo "‚ùå FAILED: User registration failed"
fi
echo

# Test 5: New user login
echo "5. Testing new user login"
USER_LOGIN=$(curl -s -X POST "http://localhost:8080/api/auth/login" \
    -H "Content-Type: application/json" \
    -d '{"username": "phase2user", "password": "testpass123"}')

if [[ $? -eq 0 && ! -z "$USER_LOGIN" ]]; then
    echo "‚úÖ SUCCESS: New user login successful"
    USER_TOKEN=$(echo "$USER_LOGIN" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    echo "User token: ${USER_TOKEN:0:50}..."
else
    echo "‚ùå FAILED: New user login failed"
fi
echo

# Test 6: Token refresh
echo "6. Testing token refresh"
REFRESH_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/auth/refresh" \
    -H "Content-Type: application/json" \
    -d "{\"token\": \"$USER_TOKEN\"}")

if [[ $? -eq 0 && ! -z "$REFRESH_RESPONSE" ]]; then
    echo "‚úÖ SUCCESS: Token refresh successful"
    NEW_TOKEN=$(echo "$REFRESH_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    echo "New token: ${NEW_TOKEN:0:50}..."
else
    echo "‚ùå FAILED: Token refresh failed"
fi
echo

# Test 7: User logout
echo "7. Testing user logout"
LOGOUT_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/auth/logout" \
    -H "Content-Type: application/json" \
    -d "{\"token\": \"$NEW_TOKEN\"}")

if [[ $? -eq 0 && ! -z "$LOGOUT_RESPONSE" ]]; then
    echo "‚úÖ SUCCESS: User logout successful"
    echo "Response: ${LOGOUT_RESPONSE:0:100}..."
else
    echo "‚ùå FAILED: User logout failed"
fi
echo

# Test 8: Verify token is revoked after logout
echo "8. Testing token revocation after logout"
REVOKED_CHECK=$(curl -s -X POST "http://localhost:8080/api/auth/validate" \
    -H "Content-Type: application/json" \
    -d "{\"token\": \"$NEW_TOKEN\"}")

if [[ $? -eq 0 && "$REVOKED_CHECK" == *"Invalid or expired token"* ]]; then
    echo "‚úÖ SUCCESS: Token properly revoked after logout"
else
    echo "‚ùå FAILED: Token not properly revoked"
fi
echo

# Test 9: Get all users (admin only)
echo "9. Testing get all users (admin only)"
ALL_USERS=$(curl -s -X GET "http://localhost:8080/api/auth/users" \
    -H "Authorization: Bearer $ADMIN_TOKEN")

if [[ $? -eq 0 && ! -z "$ALL_USERS" ]]; then
    echo "‚úÖ SUCCESS: Retrieved all users"
    echo "Response: ${ALL_USERS:0:150}..."
else
    echo "‚ùå FAILED: Could not retrieve users"
fi
echo

echo "=== Phase 2 Authentication Testing Complete ==="
echo
echo "Summary of implemented authentication endpoints:"
echo "‚úÖ POST /api/auth/login - User login with JWT token generation"
echo "‚úÖ POST /api/auth/logout - User logout with token revocation"
echo "‚úÖ GET /api/auth/user - Get current user information"
echo "‚úÖ POST /api/auth/validate - JWT token validation"
echo "‚úÖ POST /api/auth/refresh - JWT token refresh"
echo "‚úÖ POST /api/auth/register - User registration (admin only)"
echo "‚úÖ PUT /api/auth/password - Change password (implemented)"
echo "‚úÖ GET /api/auth/users - Get all users (admin only)"
echo "‚úÖ PUT /api/auth/users/role - Update user role (admin only)"
echo "‚úÖ PUT /api/auth/users/status - Enable/disable user (admin only)"
echo
echo "üîê Authentication Features:"
echo "‚úÖ JWT token management with HMAC-SHA256 signing"
echo "‚úÖ User registration and login with password hashing"
echo "‚úÖ Role-based access control (admin/user)"
echo "‚úÖ Session management with database persistence"
echo "‚úÖ Token revocation and blacklisting"
echo "‚úÖ Default admin user initialization"
echo "‚úÖ Database schema with users and sessions tables"
echo
echo "Phase 2 implementation is complete!"
