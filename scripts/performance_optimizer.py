#!/usr/bin/env python3
"""
AI Security Vision System - Performance Optimizer

Ëøô‰∏™ËÑöÊú¨Áî®‰∫é‰ºòÂåñÁ≥ªÁªüÊÄßËÉΩÔºö
- RKNN NPUÊÄßËÉΩË∞É‰ºò
- Êï∞ÊçÆÂ∫ìÊü•ËØ¢‰ºòÂåñ
- ÂÜÖÂ≠ò‰ΩøÁî®‰ºòÂåñ
- ÁΩëÁªúËøûÊé•‰ºòÂåñ
- Á≥ªÁªüËµÑÊ∫êÁõëÊéß
"""

import os
import sys
import json
import time
import psutil
import sqlite3
import subprocess
import argparse
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import requests

@dataclass
class PerformanceMetrics:
    """ÊÄßËÉΩÊåáÊ†áÊï∞ÊçÆÁ±ª"""
    timestamp: datetime
    cpu_usage: float
    memory_usage: float
    disk_usage: float
    network_io: Dict[str, int]
    api_response_time: float
    inference_time: float
    database_query_time: float
    active_connections: int

class PerformanceOptimizer:
    """ÊÄßËÉΩ‰ºòÂåñÂô®"""
    
    def __init__(self, api_url: str = "http://localhost:8080", db_path: str = "aibox.db"):
        self.api_url = api_url
        self.db_path = db_path
        self.metrics_history: List[PerformanceMetrics] = []
        
    def collect_system_metrics(self) -> PerformanceMetrics:
        """Êî∂ÈõÜÁ≥ªÁªüÊÄßËÉΩÊåáÊ†á"""
        # CPU‰ΩøÁî®Áéá
        cpu_usage = psutil.cpu_percent(interval=1)
        
        # ÂÜÖÂ≠ò‰ΩøÁî®Áéá
        memory = psutil.virtual_memory()
        memory_usage = memory.percent
        
        # Á£ÅÁõò‰ΩøÁî®Áéá
        disk = psutil.disk_usage('/')
        disk_usage = (disk.used / disk.total) * 100
        
        # ÁΩëÁªúIO
        network = psutil.net_io_counters()
        network_io = {
            'bytes_sent': network.bytes_sent,
            'bytes_recv': network.bytes_recv,
            'packets_sent': network.packets_sent,
            'packets_recv': network.packets_recv
        }
        
        # APIÂìçÂ∫îÊó∂Èó¥
        api_response_time = self.measure_api_response_time()
        
        # AIÊé®ÁêÜÊó∂Èó¥
        inference_time = self.measure_inference_time()
        
        # Êï∞ÊçÆÂ∫ìÊü•ËØ¢Êó∂Èó¥
        database_query_time = self.measure_database_query_time()
        
        # Ê¥ªË∑ÉËøûÊé•Êï∞
        active_connections = self.get_active_connections()
        
        return PerformanceMetrics(
            timestamp=datetime.now(),
            cpu_usage=cpu_usage,
            memory_usage=memory_usage,
            disk_usage=disk_usage,
            network_io=network_io,
            api_response_time=api_response_time,
            inference_time=inference_time,
            database_query_time=database_query_time,
            active_connections=active_connections
        )
    
    def measure_api_response_time(self) -> float:
        """ÊµãÈáèAPIÂìçÂ∫îÊó∂Èó¥"""
        try:
            start_time = time.time()
            response = requests.get(f"{self.api_url}/api/system/status", timeout=5)
            end_time = time.time()
            
            if response.status_code == 200:
                return (end_time - start_time) * 1000  # ËΩ¨Êç¢‰∏∫ÊØ´Áßí
            else:
                return -1
        except Exception:
            return -1
    
    def measure_inference_time(self) -> float:
        """ÊµãÈáèAIÊé®ÁêÜÊó∂Èó¥"""
        try:
            response = requests.get(f"{self.api_url}/api/detection/stats", timeout=5)
            if response.status_code == 200:
                data = response.json()
                if 'data' in data and 'average_inference_time' in data['data']:
                    return data['data']['average_inference_time']
            return -1
        except Exception:
            return -1
    
    def measure_database_query_time(self) -> float:
        """ÊµãÈáèÊï∞ÊçÆÂ∫ìÊü•ËØ¢Êó∂Èó¥"""
        try:
            if not os.path.exists(self.db_path):
                return -1
                
            start_time = time.time()
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
            cursor.fetchone()
            conn.close()
            end_time = time.time()
            
            return (end_time - start_time) * 1000  # ËΩ¨Êç¢‰∏∫ÊØ´Áßí
        except Exception:
            return -1
    
    def get_active_connections(self) -> int:
        """Ëé∑ÂèñÊ¥ªË∑ÉËøûÊé•Êï∞"""
        try:
            response = requests.get(f"{self.api_url}/api/system/metrics", timeout=5)
            if response.status_code == 200:
                data = response.json()
                if 'data' in data and 'active_connections' in data['data']:
                    return data['data']['active_connections']
            return -1
        except Exception:
            return -1
    
    def optimize_rknn_performance(self) -> Dict[str, Any]:
        """‰ºòÂåñRKNN NPUÊÄßËÉΩ"""
        print("üöÄ Optimizing RKNN NPU performance...")
        
        optimizations = []
        
        try:
            # ËÆæÁΩÆNPUÊÄßËÉΩÊ®°Âºè
            if os.path.exists("/sys/class/devfreq/fdab0000.npu/governor"):
                with open("/sys/class/devfreq/fdab0000.npu/governor", "w") as f:
                    f.write("performance")
                optimizations.append("Set NPU governor to performance mode")
            
            # ËÆæÁΩÆNPUÈ¢ëÁéá
            if os.path.exists("/sys/class/devfreq/fdab0000.npu/max_freq"):
                with open("/sys/class/devfreq/fdab0000.npu/max_freq", "r") as f:
                    max_freq = f.read().strip()
                with open("/sys/class/devfreq/fdab0000.npu/min_freq", "w") as f:
                    f.write(max_freq)
                optimizations.append(f"Set NPU frequency to maximum: {max_freq}")
            
            # ‰ºòÂåñCMAÂÜÖÂ≠ò
            try:
                subprocess.run(["echo", "3", ">", "/proc/sys/vm/drop_caches"], 
                             shell=True, check=True)
                optimizations.append("Cleared system caches")
            except subprocess.CalledProcessError:
                pass
            
            print(f"   ‚úÖ Applied {len(optimizations)} RKNN optimizations")
            return {"success": True, "optimizations": optimizations}
            
        except Exception as e:
            print(f"   ‚ùå RKNN optimization failed: {e}")
            return {"success": False, "error": str(e)}
    
    def optimize_database_performance(self) -> Dict[str, Any]:
        """‰ºòÂåñÊï∞ÊçÆÂ∫ìÊÄßËÉΩ"""
        print("üóÑÔ∏è  Optimizing database performance...")
        
        optimizations = []
        
        try:
            if not os.path.exists(self.db_path):
                return {"success": False, "error": "Database file not found"}
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # ÂêØÁî®WALÊ®°Âºè
            cursor.execute("PRAGMA journal_mode=WAL")
            optimizations.append("Enabled WAL mode")
            
            # ËÆæÁΩÆÁºìÂ≠òÂ§ßÂ∞è
            cursor.execute("PRAGMA cache_size=10000")  # 10MBÁºìÂ≠ò
            optimizations.append("Set cache size to 10MB")
            
            # ËÆæÁΩÆÂêåÊ≠•Ê®°Âºè
            cursor.execute("PRAGMA synchronous=NORMAL")
            optimizations.append("Set synchronous mode to NORMAL")
            
            # ËÆæÁΩÆ‰∏¥Êó∂Â≠òÂÇ®
            cursor.execute("PRAGMA temp_store=MEMORY")
            optimizations.append("Set temp store to memory")
            
            # ÂàÜÊûêË°®ÁªüËÆ°‰ø°ÊÅØ
            cursor.execute("ANALYZE")
            optimizations.append("Updated table statistics")
            
            # Ê£ÄÊü•Âπ∂ÂàõÂª∫Áº∫Â§±ÁöÑÁ¥¢Âºï
            tables = cursor.execute("SELECT name FROM sqlite_master WHERE type='table'").fetchall()
            for (table_name,) in tables:
                if table_name == "events":
                    # ‰∏∫eventsË°®ÂàõÂª∫Á¥¢Âºï
                    try:
                        cursor.execute("CREATE INDEX IF NOT EXISTS idx_events_timestamp ON events(timestamp)")
                        cursor.execute("CREATE INDEX IF NOT EXISTS idx_events_camera_id ON events(camera_id)")
                        optimizations.append(f"Created indexes for {table_name} table")
                    except sqlite3.Error:
                        pass
            
            conn.commit()
            conn.close()
            
            print(f"   ‚úÖ Applied {len(optimizations)} database optimizations")
            return {"success": True, "optimizations": optimizations}
            
        except Exception as e:
            print(f"   ‚ùå Database optimization failed: {e}")
            return {"success": False, "error": str(e)}
    
    def optimize_system_performance(self) -> Dict[str, Any]:
        """‰ºòÂåñÁ≥ªÁªüÊÄßËÉΩ"""
        print("‚öôÔ∏è  Optimizing system performance...")
        
        optimizations = []
        
        try:
            # ËÆæÁΩÆCPUË∞ÉÂ∫¶Âô®
            try:
                subprocess.run(["echo", "performance", ">", "/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"], 
                             shell=True, check=True)
                optimizations.append("Set CPU governor to performance")
            except subprocess.CalledProcessError:
                pass
            
            # ‰ºòÂåñÁΩëÁªúÂèÇÊï∞
            network_params = {
                "/proc/sys/net/core/rmem_max": "134217728",
                "/proc/sys/net/core/wmem_max": "134217728",
                "/proc/sys/net/ipv4/tcp_rmem": "4096 87380 134217728",
                "/proc/sys/net/ipv4/tcp_wmem": "4096 65536 134217728",
                "/proc/sys/net/core/netdev_max_backlog": "5000"
            }
            
            for param, value in network_params.items():
                try:
                    with open(param, "w") as f:
                        f.write(value)
                    optimizations.append(f"Set {param} = {value}")
                except (OSError, IOError):
                    pass
            
            # ËÆæÁΩÆËøõÁ®ã‰ºòÂÖàÁ∫ß
            try:
                pid = subprocess.check_output(["pgrep", "-f", "AISecurityVision"]).decode().strip()
                if pid:
                    subprocess.run(["renice", "-10", pid], check=True)
                    optimizations.append("Increased process priority")
            except (subprocess.CalledProcessError, FileNotFoundError):
                pass
            
            print(f"   ‚úÖ Applied {len(optimizations)} system optimizations")
            return {"success": True, "optimizations": optimizations}
            
        except Exception as e:
            print(f"   ‚ùå System optimization failed: {e}")
            return {"success": False, "error": str(e)}
    
    def monitor_performance(self, duration_minutes: int = 10) -> Dict[str, Any]:
        """ÁõëÊéßÁ≥ªÁªüÊÄßËÉΩ"""
        print(f"üìä Monitoring performance for {duration_minutes} minutes...")
        
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=duration_minutes)
        
        metrics_list = []
        
        while datetime.now() < end_time:
            metrics = self.collect_system_metrics()
            metrics_list.append(metrics)
            self.metrics_history.append(metrics)
            
            print(f"   CPU: {metrics.cpu_usage:.1f}%, "
                  f"Memory: {metrics.memory_usage:.1f}%, "
                  f"API: {metrics.api_response_time:.1f}ms, "
                  f"Inference: {metrics.inference_time:.1f}ms")
            
            time.sleep(30)  # ÊØè30ÁßíÊî∂ÈõÜ‰∏ÄÊ¨°
        
        # ËÆ°ÁÆóÁªüËÆ°‰ø°ÊÅØ
        if metrics_list:
            avg_cpu = sum(m.cpu_usage for m in metrics_list) / len(metrics_list)
            avg_memory = sum(m.memory_usage for m in metrics_list) / len(metrics_list)
            avg_api_time = sum(m.api_response_time for m in metrics_list if m.api_response_time > 0) / len([m for m in metrics_list if m.api_response_time > 0])
            avg_inference_time = sum(m.inference_time for m in metrics_list if m.inference_time > 0) / len([m for m in metrics_list if m.inference_time > 0])
            
            stats = {
                "duration_minutes": duration_minutes,
                "samples_collected": len(metrics_list),
                "average_cpu_usage": avg_cpu,
                "average_memory_usage": avg_memory,
                "average_api_response_time": avg_api_time,
                "average_inference_time": avg_inference_time,
                "peak_cpu_usage": max(m.cpu_usage for m in metrics_list),
                "peak_memory_usage": max(m.memory_usage for m in metrics_list)
            }
            
            print(f"   üìà Performance Summary:")
            print(f"      Average CPU: {avg_cpu:.1f}%")
            print(f"      Average Memory: {avg_memory:.1f}%")
            print(f"      Average API Response: {avg_api_time:.1f}ms")
            print(f"      Average Inference: {avg_inference_time:.1f}ms")
            
            return {"success": True, "stats": stats, "metrics": metrics_list}
        else:
            return {"success": False, "error": "No metrics collected"}
    
    def generate_performance_report(self) -> str:
        """ÁîüÊàêÊÄßËÉΩÊä•Âëä"""
        if not self.metrics_history:
            return "No performance data available"
        
        report = f"""
# AI Security Vision Performance Report

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Monitoring Period: {len(self.metrics_history)} samples

## System Performance Summary

"""
        
        if self.metrics_history:
            latest = self.metrics_history[-1]
            avg_cpu = sum(m.cpu_usage for m in self.metrics_history) / len(self.metrics_history)
            avg_memory = sum(m.memory_usage for m in self.metrics_history) / len(self.metrics_history)
            
            report += f"""
- **Current CPU Usage**: {latest.cpu_usage:.1f}%
- **Current Memory Usage**: {latest.memory_usage:.1f}%
- **Current Disk Usage**: {latest.disk_usage:.1f}%
- **Average CPU Usage**: {avg_cpu:.1f}%
- **Average Memory Usage**: {avg_memory:.1f}%

## API Performance

- **Latest API Response Time**: {latest.api_response_time:.1f}ms
- **Latest Inference Time**: {latest.inference_time:.1f}ms
- **Latest Database Query Time**: {latest.database_query_time:.1f}ms
- **Active Connections**: {latest.active_connections}

## Recommendations

"""
            
            # ÊÄßËÉΩÂª∫ËÆÆ
            if avg_cpu > 80:
                report += "- ‚ö†Ô∏è  High CPU usage detected. Consider optimizing AI inference or reducing camera load.\n"
            if avg_memory > 80:
                report += "- ‚ö†Ô∏è  High memory usage detected. Consider increasing system memory or optimizing memory usage.\n"
            if latest.api_response_time > 100:
                report += "- ‚ö†Ô∏è  Slow API response time. Consider optimizing database queries or enabling caching.\n"
            if latest.inference_time > 100:
                report += "- ‚ö†Ô∏è  Slow AI inference. Consider optimizing RKNN NPU settings or using smaller models.\n"
            
            if avg_cpu < 50 and avg_memory < 50 and latest.api_response_time < 50:
                report += "- ‚úÖ System performance is optimal.\n"
        
        return report

def main():
    """‰∏ªÂáΩÊï∞"""
    parser = argparse.ArgumentParser(description="AI Security Vision Performance Optimizer")
    parser.add_argument("--api-url", default="http://localhost:8080", help="API base URL")
    parser.add_argument("--db-path", default="aibox.db", help="Database file path")
    parser.add_argument("--action", choices=["optimize", "monitor", "report"], 
                       default="optimize", help="Action to perform")
    parser.add_argument("--duration", type=int, default=10, 
                       help="Monitoring duration in minutes")
    
    args = parser.parse_args()
    
    optimizer = PerformanceOptimizer(args.api_url, args.db_path)
    
    print("üöÄ AI Security Vision Performance Optimizer")
    print("=" * 50)
    
    if args.action == "optimize":
        print("Starting performance optimization...")
        
        # ÊâßË°åÂêÑÁßç‰ºòÂåñ
        rknn_result = optimizer.optimize_rknn_performance()
        db_result = optimizer.optimize_database_performance()
        sys_result = optimizer.optimize_system_performance()
        
        # ËæìÂá∫ÁªìÊûú
        print("\nüìä Optimization Results:")
        print(f"   RKNN NPU: {'‚úÖ Success' if rknn_result['success'] else '‚ùå Failed'}")
        print(f"   Database: {'‚úÖ Success' if db_result['success'] else '‚ùå Failed'}")
        print(f"   System: {'‚úÖ Success' if sys_result['success'] else '‚ùå Failed'}")
        
    elif args.action == "monitor":
        print(f"Starting performance monitoring for {args.duration} minutes...")
        result = optimizer.monitor_performance(args.duration)
        
        if result["success"]:
            print("\n‚úÖ Monitoring completed successfully")
        else:
            print(f"\n‚ùå Monitoring failed: {result['error']}")
    
    elif args.action == "report":
        print("Generating performance report...")
        
        # ÂÖàÊî∂ÈõÜ‰∏Ä‰∫õÊåáÊ†á
        for _ in range(5):
            metrics = optimizer.collect_system_metrics()
            optimizer.metrics_history.append(metrics)
            time.sleep(2)
        
        report = optimizer.generate_performance_report()
        
        # ‰øùÂ≠òÊä•Âëä
        report_file = f"performance_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_file, 'w') as f:
            f.write(report)
        
        print(f"üìÑ Performance report saved to: {report_file}")
        print("\n" + report)

if __name__ == "__main__":
    main()
